// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "01/16/2024 23:36:07"
                                                                                
// Verilog Test Bench template for design : I2C_CORE
// 
// Simulation tool : ModelSim-Altera (Verilog)
// 

`timescale 1 ns/ 1 ns
module I2C_CORE_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg Sr;
reg [7:0] address_rw;
reg clk;
reg [7:0] data_in;
reg [1:0] mode;
reg rd_data;
reg reset;
reg treg_scl;
reg treg_sda;
reg wr_data;
// wires                                               
wire busy;
wire [7:0]  data_out;
wire empty_rx;
wire scl;
wire sda;

// assign statements (if any)                          
assign scl = treg_scl;
assign sda = treg_sda;
I2C_CORE i1 (
// port map - connection between master ports and signals/registers   
	.Sr(Sr),
	.address_rw(address_rw),
	.busy(busy),
	.clk(clk),
	.data_in(data_in),
	.data_out(data_out),
	.empty_rx(empty_rx),
	.mode(mode),
	.rd_data(rd_data),
	.reset(reset),
	.scl(scl),
	.sda(sda),
	.wr_data(wr_data)
);

always
#20   clk <= ~clk;

initial                                                
begin                                                  
   reset    <= 0;
   clk      <= 0;
   wr_data  <= 0;
#100
   reset       <= 1;
   address_rw  <= 8'b01011110;   
   data_in     <= 8'b11001101;
#20
   wr_data  <= 1;
#20
   wr_data  <= 0;
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

